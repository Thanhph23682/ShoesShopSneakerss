@using APPDATA.Models;



@{

    ViewData["Title"] = "Bán hàng tại quầy";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <script data-search-pseudo-elements defer src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/js/all.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.28.0/feather.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons@4.28.0/dist/feather.min.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script src="/js/scripts.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/simple-datatables@latest" crossorigin="anonymous"></script>
    <script src="/js/datatables/datatables-simple-demo.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Tích hợp Bootstrap 4 CSS -->
    @* <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"> *@

    <!-- Tích hợp jQuery (Bootstrap 4 yêu cầu jQuery) -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

    <!-- Tích hợp Bootstrap 4 JS -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>

    <!-- Bootstrap CSS -->
    @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet"> *@

    @* <!-- Bootstrap JS (bao gồm Popper.js) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"></script> *@

    @*  <!-- Thêm Bootstrap 5 CSS và JS vào file HTML --> *@
    @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet"> *@
    @* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"></script> *@

</head>
<body>
    <main>
        <div class="container-fluid px-4">
            <div class="page-header-content mb-4">
                <div class="row align-items-center justify-content-between pt-3">
                    <div class="col-auto mb-3">
                        <div class="d-flex align-items-center">
                            <div class="page-header-icon bg-primary p-3 rounded me-3">
                                <i data-feather="shopping-cart" class="text-white"></i>
                            </div>
                            <div>
                                <h1 class="page-header-title h4 mb-0">Bán hàng tại quầy</h1>
                                <div class="small text-muted">Quản lý giao dịch bán hàng</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="container-fluid">
                <div class="row">
                    <!-- Left Side - Product List and Cart -->
                    <div class="col-md-8">
                        <div class="card-body">
                            <!-- Tabs for switching between Cart and Products -->
                            <ul class="nav nav-tabs mb-4" id="salesTab" role="tablist">
                                <li class="nav-item">
                                    <a class="nav-link active" id="cart-tab" data-bs-toggle="tab" href="#cart" role="tab">
                                        <i class="fas fa-shopping-cart me-2"></i>Giỏ hàng
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" id="products-tab" data-bs-toggle="tab" href="#products" role="tab">
                                        <i class="fas fa-box me-2"></i>Sản phẩm
                                    </a>
                                </li>
                            </ul>

                            <div class="tab-content" id="salesTabContent">
                                <!-- Cart Tab -->

                                <div class="tab-pane fade show active" id="cart" role="tabpanel">
                                    <div class="table-responsive">
                                        <table class="table table-hover" id="cartTable">
                                            <thead class="bg-light">
                                                <tr>
                                                    <th style="width: 5%;">#</th>
                                                    <th style="width: 30%;">Sản phẩm</th>
                                                    <th style="width: 15%;">Số lượng</th>
                                                    <th style="width: 20%;">Đơn giá</th>
                                                    <th style="width: 20%;">Thành tiền</th>
                                                    <th style="width: 10%;">Thao tác</th>
                                                </tr>
                                            </thead>
                                            <tbody id="cartItems">
                                                <!-- Cart items will be dynamically added here -->
                                            </tbody>
                                            <tfoot class="table-light">
                                                <tr>
                                                    <td colspan="4" class="text-end fw-bold">Tổng cộng:</td>
                                                    <td colspan="2" class="fw-bold text-primary" id="cartTotal">0 ₫</td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                </div>

                                <!-- Products Tab -->
                                <div class="tab-pane fade" id="products" role="tabpanel">
                                    <!-- Thêm thanh tìm kiếm -->
                                    <div class="search-container mb-4">
                                        <i class="fas fa-search search-icon"></i>
                                        <input type="text" class="search-input" placeholder="Tìm kiếm sản phẩm...">
                                    </div>
                                    <div class="row g-3" id="productGrid">
                                        <!-- Products will be displayed here -->
                                    </div>
                                    <!-- Thêm phân trang -->
                                    <div class="pagination-container mt-4 d-flex justify-content-center">
                                        <nav aria-label="Product pagination">
                                            <ul class="pagination" id="productPagination">
                                                <!-- Pagination will be added here -->
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Right Side - Payment Information -->
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-info text-white d-flex align-items-center">
                                <i class="fas fa-credit-card me-2" style="font-size: 1.5rem;"></i>
                                <h4 class="mb-0">Thông tin thanh toán</h4>
                            </div>
                            <div class="card-body">
                                <!-- Staff Selection -->
                                <div class="mb-4">
                                    <label class="form-label text-muted small mb-1">Nhân viên bán hàng</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-user text-primary"></i>
                                        </span>
                                        <select class="form-select" id="staffSelect" asp-items="ViewBag.Nhanvien">
                                            <option class="form-select" id="staffSelect" selected disabled>Chọn nhân viên</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Customer Information -->
                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Khách hàng</label>
                                    <div class="input-group">
                                        <span class="input-group-text bg-light">
                                            <i class="fas fa-users text-primary"></i>
                                        </span>
                                        @* <select id="customerSelect" class="form-control">
                                            <option value="walk-in">Khách lẻ</option>
                                            <option value="registered" data-id="1">Thành viên</option>
                                        </select> *@
                                         <select class="form-control" id="customerSelect">
                                        <option value="walk-in">Khách lẻ</option>
                                        <option value="registered">Thành viên</option>
                                        </select>
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary" id="customerToggleBtn" type="button">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <!-- Các thông tin khác -->
                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Tên khách hàng</label>
                                    <input type="text" class="form-control" id="customerName" readonly>
                                </div>

                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Số điện thoại</label>
                                    <input type="text" class="form-control" id="customerPhone" readonly>
                                </div>

                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Địa chỉ</label>
                                    <textarea class="form-control" id="customerAddress" rows="2" readonly></textarea>
                                </div>

                                <!-- Payment Details -->
                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Tổng tiền</label>
                                    <input type="text" class="form-control" id="totalAmount" readonly>
                                </div>

                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Tiền khách trả</label>
                                    <input type="number" class="form-control" id="paidAmount">
                                </div>

                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Tiền thối</label>
                                    <input type="text" class="form-control" id="changeAmount" readonly>
                                </div>

                                <div class="form-group mb-4">
                                    <label class="form-label text-muted small mb-1">Phương thức thanh toán</label>
                                    <select class="form-control" id="paymentMethod">
                                        <option value="cash">Tiền mặt</option>
                                        <option value="transfer">Chuyển khoản</option>
                                    </select>
                                </div>

                                <!-- Action Buttons -->
                                <div class="btn-group w-100">
                                    <button class="btn btn-success" id="completePayment">
                                        <i class="fas fa-check"></i> Thanh toán
                                    </button>
                                    @* <button class="btn btn-info" id="printBill">
                                    <i class="fas fa-print"></i> In hóa đơn
                                    </button> *@
                                    <button class="btn btn-danger" id="cancelBill">
                                        <i class="fas fa-times"></i> Hủy
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Add Customer Modal -->
    <div class="modal fade" id="addCustomerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm khách hàng mới</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="addCustomerForm">
                        <div class="form-group">
                            <label>Họ tên</label>
                            <input type="text" class="form-control" name="fullName" required>
                        </div>
                        <div class="form-group">
                            <label>Số điện thoại</label>
                            <input type="tel" class="form-control" name="phoneNumber" required>
                        </div>
                        <div class="form-group">
                            <label>Địa chỉ</label>
                            <textarea class="form-control" name="address"></textarea>
                        </div>
                    </form>
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                    <button type="button" class="btn btn-primary" id="saveCustomer">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="registeredCustomerModal" tabindex="-1" role="dialog" aria-labelledby="registeredCustomerModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registeredCustomerModalTitle">Danh sách thành viên đã đăng ký</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>



                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Tên khách hàng</th>
                                    <th>Số điện thoại</th>
                                    <th>Địa chỉ</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody id="registeredCustomerTable">
                                <!-- Dữ liệu khách hàng sẽ được tải vào đây -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>





</body>
</html>
<style>
    /* Size Selection Styles */
.size-selection {
    position: relative;
}

.size-select-container {
    position: relative;
    margin-bottom: 1rem;
}

.size-select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    appearance: none;
    background-color: #fff;
    cursor: pointer;
    transition: all 0.2s;
}

.size-select:hover {
    border-color: #adb5bd;
}

.size-select:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    outline: none;
}

.selected-size {
    display: inline-flex;
    align-items: center;
    background: #e9ecef;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
}

.selected-size .remove-size {
    margin-left: 0.5rem;
    cursor: pointer;
    color: #dc3545;
    font-size: 0.75rem;
}

.selected-size .remove-size:hover {
    color: #bb2d3b;
}

.size-badge {
    display: inline-flex;
    align-items: center;
    background: #f8f9fa;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    border: 1px solid #dee2e6;
}

.size-badge.selected {
    background: #e9ecef;
    border-color: #adb5bd;
}

.size-toggle {
    background: none;
    border: none;
    color: #0d6efd;
    padding: 0;
    font-size: 0.875rem;
    cursor: pointer;
    text-decoration: underline;
}

.size-toggle:hover {
    color: #0a58ca;
}

.size-list {
    display: none;
    margin-top: 0.5rem;
}

.size-list.show {
    display: block;
}
    /* Cải thiện giao diện số lượng */
    .quantity-control {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .quantity-btn {
        width: 28px;
        height: 28px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #dee2e6;
        background: #fff;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .quantity-btn:hover {
            background: #e9ecef;
        }

    .quantity-value {
        min-width: 40px;
        text-align: center;
        font-weight: 500;
    }

    .search-container {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s;
    }

        .search-input:focus {
            outline: none;
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
    }

    /* Hiệu ứng highlight kết quả tìm kiếm */
    .search-highlight {
        animation: highlightFade 1s ease-out;
    }

    card-img-container {
        width: 100%;
        height: 150px; /* Chiều cao cố định */
        overflow: hidden; /* Ẩn phần ảnh vượt ra ngoài */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image {
        max-width: 100%; /* Hình ảnh không vượt quá chiều rộng container */
        max-height: 100%; /* Hình ảnh không vượt quá chiều cao container */
        object-fit: contain; /* Giữ tỉ lệ ảnh và căn giữa */
    }

    .text-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    /* Thêm vào phần style */


    .product-image {
        height: 200px;
        object-fit: cover;
    }

    .product-price {
        font-size: 1.1rem;
        font-weight: 600;
        color: #2c7be5;
    }

    .nav-tabs .nav-link {
        color: #6c757d;
        font-weight: 500;
    }

        .nav-tabs .nav-link.active {
            color: #2c7be5;
            font-weight: 600;
        }

    .table td {
        vertical-align: middle;
    }

    .quantity-input {
        width: 80px;
        text-align: center;
    }

    .btn-remove {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }



    .highlight-row {
        animation: highlightRow 1s ease-out;
    }

    /* Đảm bảo rằng phần "Thông tin thanh toán" nằm ở trên cùng */
    .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        align-items: flex-start;
    }

    .col-md-4 {
        order: 1; /* Đảm bảo rằng phần thông tin thanh toán lên trên cùng */
    }

    .col-md-8 {
        order: 2;
    }

    /* Tùy chỉnh giao diện card */
    .card-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .input-group {
        margin-bottom: 1rem;
    }

    input, select, textarea {
        margin-bottom: 1rem;
    }

    .btn-group button {
        width: 32%;
        margin-right: 1%;
    }

        .btn-group button:last-child {
            margin-right: 0;
        }

    .table th, .table td {
        vertical-align: middle;
    }

    .table-hover tbody tr:hover {
        background-color: #f2f2f2;
    }

    .btn-remove {
        color: #dc3545;
        font-size: 1.2rem;
        cursor: pointer;
    }

        .btn-remove:hover {
            color: #bd2130;
        }
</style>
@section Scripts {
    <script>
        // Hàm hiển thị alert cho người dùng
        function showAlert(message, type) {
            // Có thể sử dụng thư viện như SweetAlert2 hoặc Bootstrap Toast để hiển thị thông báo
            alert(message); // Dùng alert đơn giản nếu chưa tích hợp thư viện
        }
           async function showAlert(text, icon) {
                if (icon == 'warning') {
                    Swal.fire({
                        title: 'Cảnh báo',
                        text: text,
                        icon: icon,
                        showConfirmButton: true
                    }).then(function () {
                        // Không có hành động thêm sau khi nhấn OK
                    });
                } else if (icon == 'error') {
                    Swal.fire({
                        title: 'Oops xảy ra lỗi...',
                        text: text,
                        icon: icon,
                        showConfirmButton: true
                    }).then(function () {
                        // Không có hành động thêm sau khi nhấn OK
                    });
                } else if (icon == 'success') {
                    Swal.fire({
                        title: 'Thành công',
                        text: text,
                        icon: icon,
                        showConfirmButton: false,
                        timer: 2000 // Thông báo sẽ tự động đóng sau 2 giây
                    }).then(function () {
                        // Không có hành động thêm sau khi nhấn OK
                    });
                } else if (icon == 'info') {
                    Swal.fire({
                        title: 'Thông tin',
                        text: text,
                        icon: icon,
                        showConfirmButton: true
                    }).then(function () {
                        // Không có hành động thêm sau khi nhấn OK
                    });
                }
            }

        async function showConfirm(title, text, confirmText, cancelText) {
            return Swal.fire({
                title: title,
                text: text,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: confirmText,
                cancelButtonText: cancelText
            }).then((result) => {
                return result.isConfirmed;
            })
        }

        document.addEventListener("DOMContentLoaded", function () {
            const registeredCustomerTable = document.getElementById("registeredCustomerTable");
            const customerName = document.getElementById("customerName");
            const customerPhone = document.getElementById("customerPhone");
            const customerAddress = document.getElementById("customerAddress");

            // Lấy danh sách khách hàng đã đăng ký
            fetch("/Admin/AdminBanHangTaiQuay/GetCustomers")
                .then((response) => response.json())
                .then((data) => {
                    data.forEach((customer) => {
                        const row = document.createElement("tr");

                        row.innerHTML = `
                                    <td>${customer.name}</td>
                                    <td>${customer.phone}</td>
                                    <td>${customer.address}</td>
                                    <td>
                                        <button class="btn btn-primary btn-sm select-customer" data-id="${customer.id}" data-name="${customer.name}" data-phone="${customer.phone}" data-address="${customer.address}">
                                            Chọn
                                        </button>
                                    </td>
                                `;
                        registeredCustomerTable.appendChild(row);
                    });

                    // Thêm sự kiện cho các nút "Chọn"
                    document.querySelectorAll(".select-customer").forEach((button) => {
                        button.addEventListener("click", function () {
                            const name = this.dataset.name;
                            const phone = this.dataset.phone;
                            const address = this.dataset.address;

                            // Điền thông tin khách hàng vào form chính
                            customerName.value = name;
                            customerPhone.value = phone;
                            customerAddress.value = address;
                                 // Hiển thị thông báo đã chọn thành công
                            showAlert('Thông tin thành viên đã được lưu thành công!', 'success').then(() => {
            // Đóng modal sau khi người dùng đã xem thông báo
            $('#registeredCustomerModal').modal('hide');
        });
                        });
                    });
                })
                .catch((error) => {
                    console.error("Lỗi khi tải danh sách khách hàng:", error);
                    alert("Không thể tải danh sách khách hàng. Vui lòng thử lại sau!");
                });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const customerType = document.getElementById("customerSelect");
            const customerToggleBtn = document.getElementById("customerToggleBtn");
            const addCustomerModal = new bootstrap.Modal(document.getElementById("addCustomerModal"));
            const registeredCustomerModal = new bootstrap.Modal(document.getElementById("registeredCustomerModal"));

            // Khi nút "+" được nhấn
            customerToggleBtn.addEventListener("click", function () {
                const selectedCustomerType = customerType.value;

                if (selectedCustomerType === "walk-in") {
                    // Hiển thị modal "Khách lẻ"
                    addCustomerModal.show();
                } else if (selectedCustomerType === "registered") {
                    // Hiển thị modal "Khách đã đăng ký"
                    registeredCustomerModal.show();
                }
            });
        });

        document.getElementById("saveCustomer").addEventListener("click", function () {
            // Lấy giá trị từ các trường trong form modal
            var fullName = document.querySelector("input[name='fullName']").value;
            var phoneNumber = document.querySelector("input[name='phoneNumber']").value;
            var address = document.querySelector("textarea[name='address']").value;

            // Kiểm tra xem tất cả các trường có được điền đầy đủ không
            if (fullName && phoneNumber && address) {
                // Cập nhật thông tin vào form thanh toán cho khách hàng "walk-in"
                document.getElementById("customerName").value = fullName;
                document.getElementById("customerPhone").value = phoneNumber;
                document.getElementById("customerAddress").value = address;

                // Tùy chọn đặt loại khách hàng là "Khách lẻ"
                document.getElementById("customerSelect").value = "walk-in";

                // Đóng modal sau khi lưu
                $('#addCustomerModal').modal('hide');

                // Hiển thị thông báo thành công


                // Hiển thị thông báo thành công
                showAlert('Thông tin khách hàng đã được lưu thành công!', 'success');
            } else {
                // Hiển thị thông báo lỗi nếu có trường chưa được điền đầy đủ
                showAlert('Vui lòng điền đầy đủ thông tin khách hàng.', 'error');
            }
        });



        // Handle the customer selection change in the payment form
        document.getElementById("customerSelect").addEventListener("change", function () {
            var customerType = this.value;

            // If the user selects "Khách lẻ", show the modal for new customer entry
            if (customerType === "walk-in") {
                $('#addCustomerModal').modal('show');
            } else {
                // If "Khách đã đăng ký" is selected, handle it accordingly (perhaps show registered customers list)
                // This can be implemented based on your requirements.
            }
        });





        document.addEventListener("DOMContentLoaded", function () {
            const staffSelect = document.getElementById("staffSelect");

            // Gọi API lấy danh sách nhân viên
            fetch("/Admin/AdminBanHangTaiQuay/GetStaff")
                .then((response) => response.json())
                .then((data) => {
                    // Thêm các tùy chọn vào select
                    data.forEach((staff) => {
                        const option = document.createElement("option");
                        option.value = staff.id;
                        option.textContent = staff.name;
                        staffSelect.appendChild(option);
                    });
                })
                .catch((error) => {
                    console.error("Lỗi khi tải danh sách nhân viên:", error);
                });
        });

        $(document).ready(function () {
            let cart = [];
            let cartItemId = 1;
            const itemsPerPage = 8; // Số sản phẩm trên mỗi trang
            let allProducts = [];
            // loadProducts(1);
            // Load products
            // Sửa hàm loadProducts
            let currentPage = 1; // Thêm biến theo dõi trang hiện tại

            // function loadProducts(page = 1) {
            //     currentPage = page; // Cập nhật trang hiện tại
            //     $.getJSON('/Admin/AdminBanHangTaiQuay/GetProducts', function (products) {
            //         allProducts = products;

            //         // Tính toán phân trang
            //         const totalPages = Math.ceil(products.length / itemsPerPage);
            //         const start = (page - 1) * itemsPerPage;
            //         const end = start + itemsPerPage;
            //         const paginatedProducts = products.slice(start, end);

            //         displayProducts(paginatedProducts);
            //         updatePagination(totalPages, currentPage);
            //     });
            // }
    //             function loadProducts(page = 1) {
    //     currentPage = page;
    //     $.getJSON('/Admin/AdminBanHangTaiQuay/GetProducts', function (products) {
    //         allProducts = products;
    //         displayProducts(products.slice((page - 1) * itemsPerPage, page * itemsPerPage));
    //         updatePagination(Math.ceil(products.length / itemsPerPage), page);
    //     });
    // }

//     function loadProducts(page = 1) {
//     currentPage = page; // Update the current page
//     $.getJSON('/Admin/AdminBanHangTaiQuay/GetProducts', { page: page, itemsPerPage: 8 }, function (products) {
//         allProducts = products; // Store all the products globally (optional)

//         // Hiển thị sản phẩm ngay khi load trang
//         $('#products-tab').tab('show'); // Chuyển sang tab sản phẩm

//         // Display the products for the current page
//         displayProducts(products); // Assuming cart data is available

//         // Update pagination (calculating total pages)
//         $.getJSON('/Admin/AdminBanHangTaiQuay/GetProducts', function (allProducts) {
//             const totalPages = Math.ceil(allProducts.length / 8); // Total pages based on all products
//             updatePagination(totalPages, page); // Update pagination buttons
//         });
//     });
// }

    let totalProducts = 0;

    function loadProducts(page = 1) {
        currentPage = page;

        // Gọi API với tham số phân trang
        $.ajax({
            url: '/Admin/AdminBanHangTaiQuay/GetProducts',
            data: {
                page: page,
                itemsPerPage: 8
            },
            success: function(response) {
                // Hiển thị sản phẩm
                displayProducts(response);

                // Lấy tổng số sản phẩm để tính số trang
                $.ajax({
                    url: '/Admin/AdminBanHangTaiQuay/GetTotalProducts',
                    success: function(total) {
                        totalProducts = total;
                        const totalPages = Math.ceil(totalProducts / 8);
                        updatePagination(totalPages, page);
                    }
                });
            },
            error: function(error) {
                console.error('Error loading products:', error);
            }
        });
    }

//     function loadProducts(page = 1) {
//     currentPage = page;

//     // Gọi API GetProducts với tham số phân trang
//     $.getJSON(`/Admin/AdminBanHangTaiQuay/GetProducts?page=${page}&itemsPerPage=${itemsPerPage}`, function (response) {
//         // Hiển thị sản phẩm và cập nhật phân trang

//         displayProducts(response.products);
//         updatePagination(response.totalPages, response.currentPage);
//     });
// }


            // function displayProducts(products) {
            //     const productGrid = $('#productGrid');
            //     productGrid.empty();

            //     products.forEach(product => {
            //         const productCard = `
            //                 <div class="col-md-3 mb-4 product-item">
            //                     <div class="card h-100 product-card shadow-sm">
            //                         <div class="card-img-container position-relative">
            //                             <img src="${product.image}"
            //                                  class="card-img-top product-image"
            //                                  alt="${product.name}">

            //                         </div>
            //                         <div class="card-body d-flex flex-column">
            //                             <h6 class="card-title text-truncate mb-2" title="${product.name}">
            //                                 ${product.name}
            //                             </h6>
            //                             <div class="product-details mt-auto">
            //                                 <p class="card-text mb-2 text-primary fw-bold">
            //                                     ${formatCurrency(product.price)}
            //                                 </p>
            //                                 <button class="btn btn-primary btn-sm w-100 add-to-cart"
            //                                         data-id="${product.id}"
            //                                         data-name="${product.name}"
            //                                         data-price="${product.price}"
            //                                         ${product.stock <= 0 ? 'disabled' : ''}>
            //                                     <i class="fas fa-cart-plus me-1"></i> Thêm vào giỏ
            //                                 </button>
            //                             </div>
            //                         </div>
            //                     </div>
            //                 </div>
            //             `;
            //         productGrid.append(productCard);
            //     });
            // }

                    function displayProducts(products) {
        const productGrid = $('#productGrid');
        productGrid.empty();

        products.forEach(product => {
            const randomSizes = generateRandomSizes();
            const sizeOptions = randomSizes.map(size => 
                `<option value="${size}">${size}</option>`
            ).join('');

            const productCard = `
                <div class="col-md-3 mb-4 product-item">
                    <div class="card h-100 product-card shadow-sm">
                        <div class="card-img-container position-relative">
                            <img src="${product.image}"
                                 class="card-img-top product-image"
                                 alt="${product.name}">
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h6 class="card-title text-truncate mb-2" title="${product.name}">
                                ${product.name}
                            </h6>
                            <div class="product-details mt-auto">
                                <p class="card-text mb-2 text-primary fw-bold">
                                    ${formatCurrency(product.price)}
                                </p>
                                <div class="size-selection">
                                    <div class="size-select-container">
                                        <select class="form-select form-select-sm size-select" 
                                                data-product-id="${product.id}">
                                            <option value="">Chọn size</option>
                                            ${sizeOptions}
                                        </select>
                                    </div>
                                    <div class="selected-sizes" id="selected-sizes-${product.id}"></div>
                                    <button class="size-toggle" data-product-id="${product.id}">
                                        Xem tất cả size
                                    </button>
                                    <div class="size-list" id="size-list-${product.id}">
                                        ${randomSizes.map(size => `
                                            <span class="size-badge" data-size="${size}">
                                                Size ${size}
                                            </span>
                                        `).join('')}
                                    </div>
                                </div>
                                <button class="btn btn-primary btn-sm w-100 add-to-cart mt-2"
                                        data-id="${product.id}"
                                        data-name="${product.name}"
                                        data-price="${product.price}"
                                        disabled>
                                    <i class="fas fa-cart-plus me-1"></i> Thêm vào giỏ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            productGrid.append(productCard);
        });
        

        // Add event listeners
        $('.size-toggle').click(function(e) {
            e.preventDefault();
            const productId = $(this).data('product-id');
            const sizeList = $(`#size-list-${productId}`);
            sizeList.toggleClass('show');
            $(this).text(sizeList.hasClass('show') ? 'Ẩn size' : 'Xem tất cả size');
        });

        // $('.size-select').change(function() {
        //     const productId = $(this).data('product-id');
        //     const selectedSize = $(this).val();
        //     const sizeName = $(this).find('option:selected').text();

        //     if (selectedSize) {
        //         const selectedSizesContainer = $(`#selected-sizes-${productId}`);
        //         const sizeElement = `
        //             <span class="selected-size">
        //                 Size ${selectedSize}
        //                 <span class="remove-size" data-size="${selectedSize}">×</span>
        //             </span>
        //         `;
        //         selectedSizesContainer.append(sizeElement);
        //         $(this).val('');

        //         // Enable add to cart button
        //         $(this).closest('.card-body').find('.add-to-cart').prop('disabled', false);
        //     }
        // });

        $(document).on('change', '.size-select', function () {
    const productId = $(this).data('product-id');
    const selectedSize = $(this).val();
    const sizeName = $(this).find('option:selected').text();

    if (selectedSize) {
        const selectedSizesContainer = $(`#selected-sizes-${productId}`);
        const sizeElement = `
            <span class="selected-size " data-size="${selectedSize}">
                Size ${sizeName} <span class="remove-size" data-size="${selectedSize}">×</span>
            </span>
        `;

        // Thêm size vào danh sách nếu chưa tồn tại
        if (!$(`#selected-sizes-${productId} [data-size="${selectedSize}"]`).length) {
            selectedSizesContainer.append(sizeElement);
        }

        $(this).val(''); // Reset dropdown
        $(`[data-id="${productId}"].add-to-cart`).prop('disabled', false); // Kích hoạt nút thêm vào giỏ
    }
});


        $(document).on('click', '.remove-size', function() {
            const sizeContainer = $(this).closest('.selected-size');
            const productCard = $(this).closest('.card-body');

            sizeContainer.remove();

            // If no sizes selected, disable add to cart button
            if (productCard.find('.selected-size').length === 0) {
                productCard.find('.add-to-cart').prop('disabled', true);
            }
        });
    }

    function generateRandomSizes() {
        const sizes = ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44"];
        const randomCount = Math.floor(Math.random() * sizes.length) + 1;
        return sizes.sort(() => 0.5 - Math.random()).slice(0, randomCount);
    }
            function addToCart(productId, productName, productPrice) {
        // Lấy size đã chọn từ sản phẩm
        const selectedSizes = $(`#selected-sizes-${productId} .selected-size`);

        if (selectedSizes.length === 0) {
            showAlert('Vui lòng chọn size trước khi thêm vào giỏ hàng', 'warning');
            return;
        }

        // Thêm vào giỏ hàng cho mỗi size đã chọn
        selectedSizes.each(function() {
            const size = $(this).data('size');
            const cartItemId = `${productId}-${size}`;
            const existingItem = cart.find(item => item.cartItemId === cartItemId);

            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                cart.push({
                    cartItemId,
                    id: productId,
                    name: productName,
                    price: productPrice,
                    quantity: 1,
                    size: size,
                    sizeName: `Size ${size}`
                });
            }
        });

        updateCart();
        showAlert('Thêm vào giỏ hàng thành công!', 'success');
    }




    function updateCart() {
        const cartItems = $('#cartItems');
        cartItems.empty();
        let total = 0;

        cart.forEach((item, index) => {
            const subtotal = item.price * item.quantity;
            total += subtotal;

            const row = `
                <tr class="cart-item">
                    <td>${index + 1}</td>
                    <td>${item.name}<br><small class="text-muted">Size: ${item.sizeName}</small></td>
                    <td>
                        <div class="quantity-control">
                            <button class="quantity-btn quantity-decrease" data-id="${item.cartItemId}">-</button>
                            <span class="quantity-value">${item.quantity}</span>
                            <button class="quantity-btn quantity-increase" data-id="${item.cartItemId}">+</button>
                        </div>
                    </td>
                    <td>${formatCurrency(item.price)}</td>
                    <td>${formatCurrency(subtotal)}</td>
                    <td>
                        <button class="btn btn-danger btn-sm btn-remove" data-id="${item.cartItemId}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;
            cartItems.append(row);
        });

        $('#cartTotal').text(formatCurrency(total));
        $('#totalAmount').val(formatCurrency(total));
    }






        $(document).ready(function() {
        loadProducts(1); // Load first page immediately

        // Enable size selection
        $(document).on('change', '.product-size', function() {
            const addToCartBtn = $(this).closest('.card-body').find('.add-to-cart');
            addToCartBtn.prop('disabled', !this.value);
        });
    });

               // Cập nhật hàm updatePagination
    function updatePagination(totalPages, currentPage) {
        const pagination = $('#productPagination');
        pagination.empty();

        // Previous button
        pagination.append(`
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage - 1}">
                    <span>&laquo;</span>
                </a>
            </li>
        `);

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (
                i === 1 || // First page
                i === totalPages || // Last page
                (i >= currentPage - 1 && i <= currentPage + 1) // Pages around current
            ) {
                pagination.append(`
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `);
            } else if (
                i === currentPage - 2 ||
                i === currentPage + 2
            ) {
                pagination.append(`
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                `);
            }
        }

        // Next button
        pagination.append(`
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <a class="page-link" href="#" data-page="${currentPage + 1}">
                    <span>&raquo;</span>
                </a>
            </li>
        `);
    }

    // Cập nhật event handler cho các nút phân trang
    $(document).on('click', '.page-link', function(e) {
        e.preventDefault();
        const page = $(this).data('page');

        if (!$(this).parent().hasClass('disabled') && page) {
            loadProducts(page);
        }
    });




            // Add to cart
            $(document).on('click', '.add-to-cart', function () {
                const productCard = $(this).closest('.product-card');
                const productId = productCard.data('id');

                // Add to cart logic here
                updateCart();
            });

            // // Update cart display
            // function updateCart() {
            //     const cartItems = $('#cartItems');
            //     cartItems.empty();

            //     cart.forEach(item => {
            //         cartItems.append(`
            //             <tr>
            //                 <td>${item.name}</td>
            //                 <td>${formatCurrency(item.price)}</td>
            //                 <td>
            //                     <input type="number" class="form-control form-control-sm quantity"
            //                            value="${item.quantity}" min="1" data-id="${item.id}">
            //                 </td>
            //                 <td>${formatCurrency(item.price * item.quantity)}</td>
            //                 <td>
            //                     <button class="btn btn-sm btn-danger remove-item" data-id="${item.id}">
            //                         <i class="fas fa-trash"></i>
            //                     </button>
            //                 </td>
            //             </tr>
            //         `);
            //     });

            //     calculateTotals();
            // }

            // // Calculate totals
            // function calculateTotals() {
            //     const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            //     $('#totalAmount').val(formatCurrency(total));

            //     const paid = parseFloat($('#paidAmount').val()) || 0;
            //     const change = paid - total;
            //     $('#changeAmount').val(formatCurrency(change));
            // }

            // $(document).ready(function () {

            //     $.getJSON('/Admin/AdminBanHangTaiQuay/GetProducts', function (products) {
            //         var productGrid = $('#productGrid');
            //         productGrid.empty(); // Clear previous content
            //         let cartItemId = 1;
            //         // Loop through the products and display them
            //         products.forEach(function (product) {
            //             var productItem = `
            //     <div class="col-md-3 mb-3 product-item">
            //         <div class="card h-100 text-center">
            //             <div class="card-img-container">
            //                 <img src="${product.image}" class="card-img-top product-image" alt="${product.name}">
            //             </div>
            //             <div class="card-body">
            //                 <h6 class="card-title text-truncate" title="${product.name}">${product.name}</h6>
            //                 <p class="card-text">
            //                     Giá: ${product.price.toLocaleString()} đ
            //                 </p>
            //                         <button class="btn btn-primary btn-sm add-to-cart"
            //             data-id="${product.id}"
            //             data-name="${product.name}"
            //             data-price="${product.price}">
            //         <i class="fas fa-cart-plus me-1"></i> Thêm vào giỏ
            //     </button>

            //             </div>
            //         </div>
            //     </div>
            //     `;
            //             productGrid.append(productItem);

            //         });
                $(document).ready(function () {
        // Gọi hàm loadProducts để tải trang đầu tiên khi mở giao diện
        loadProducts(1);

        // Event listener cho nút "Thêm vào giỏ hàng"
        $(document).on('click', '.add-to-cart', function () {
            const productId = $(this).data('id');
            const productName = $(this).data('name');
            const productPrice = $(this).data('price');

            // Gọi hàm thêm vào giỏ hàng
            addToCart(productId, productName, productPrice);
        });
    });
            //         // Event listener to add items to cart
            //         // Bằng đoạn code mới sử dụng event delegation
            //         $(document).on('click', '.add-to-cart', function () {
            //             const productId = $(this).data('id');
            //             const productName = $(this).data('name');
            //             const productPrice = $(this).data('price');

            //             addToCart(productId, productName, productPrice);
            //         });
            //     });
            // });
            $(document).on('click', '.page-link', function (e) {
                e.preventDefault();
                const newPage = $(this).data('page');

                if (!$(this).parent().hasClass('disabled') && newPage >= 1 && newPage <= Math.ceil(allProducts.length / itemsPerPage)) {
                    loadProducts(newPage);
                }
            });

            // Add to cart function (this could be more complex depending on your cart handling)
            function addToCart(productId, productName, productPrice) {
                // Kiểm tra xem sản phẩm đã có trong giỏ hàng chưa
                const existingProduct = cart.find(item => item.id === productId);

                if (existingProduct) {
                    existingProduct.quantity += 1;
                } else {
                    cart.push({
                        id: productId,
                        name: productName,
                        price: productPrice,
                        quantity: 1

                    });
                }
                 // Hiển thị thông báo
    showAlert('Thêm vào giỏ hàng thành công!', 'success');
                // Chuyển tab về giỏ hàng và cập nhật
                $('#salesTab a[href="#cart"]').tab('show');
                    renderCart(); // Hàm hiển thị lại giỏ hàng
                updateCart();
            }
                function renderCart() {
        const cartContainer = $('#cartContainer');
        cartContainer.empty();

        cart.forEach(item => {
            const productRow = `
                <div class="cart-item" data-cart-id="${item.cartItemId}">
                    <h6>${item.name} - Size ${item.sizeName}</h6>
                    <p>Giá: ${formatCurrency(item.price)}</p>
                    <p>Số lượng: ${item.quantity}</p>
                    <button class="btn btn-danger btn-sm remove-cart-item" data-cart-id="${item.cartItemId}">
                        Xóa
                    </button>
                </div>
            `;
            cartContainer.append(productRow);
        });

        // Thêm sự kiện xóa sản phẩm
        $('.remove-cart-item').click(function() {
            const cartItemId = $(this).data('cart-id');
            cart = cart.filter(item => item.cartItemId !== cartItemId);
            renderCart();
        });
    }


            // Cập nhật hàm updateCart
            // function updateCart() {
            //     const cartItems = $('#cartItems');
            //     cartItems.empty();
            //     let total = 0;

            //     cart.forEach((item, index) => {
            //         const subtotal = item.price * item.quantity;
            //         total += subtotal;

            //         const row = `
            //         <tr class="highlight-row">
            //             <td>${index + 1}</td>
            //             <td>${item.name}</td>
            //             <td>
            //                 <div class="input-group input-group-sm">
            //                     <button class="btn btn-outline-secondary decrease-quantity" data-id="${item.id}">-</button>
            //                     <input type="number" class="form-control quantity-input" value="${item.quantity}" min="1" data-id="${item.id}">
            //                     <button class="btn btn-outline-secondary increase-quantity" data-id="${item.id}">+</button>
            //                 </div>
            //             </td>
            //             <td>${formatCurrency(item.price)}</td>
            //             <td>${formatCurrency(subtotal)}</td>
            //             <td>
            //                 <button class="btn btn-danger btn-sm btn-remove" data-id="${item.id}">
            //                     <i class="fas fa-trash"></i>
            //                 </button>
            //             </td>
            //         </tr>
            //     `;
            //         cartItems.append(row);
            //     });

            //     $('#cartTotal').text(formatCurrency(total));
            //     $('#totalAmount').val(formatCurrency(total));

            // }
            function updateCart() {
                const cartItems = $('#cartItems');
                cartItems.empty();
                let total = 0;

                cart.forEach((item, index) => {
                    const subtotal = item.price * item.quantity;
                    total += subtotal;

                    const row = `
                        <tr class="cart-item">
                            <td>${index + 1}</td>
                            <td>${item.name}</td>
                            <td>
                                <div class="quantity-control">
                                    <button class="quantity-btn quantity-decrease" data-id="${item.id}">-</button>
                                    <span class="quantity-value">${item.quantity}</span>
                                    <button class="quantity-btn quantity-increase" data-id="${item.id}">+</button>
                                </div>
                            </td>
                            <td>${formatCurrency(item.price)}</td>
                            <td>${formatCurrency(subtotal)}</td>
                            <td>
                                <button class="btn btn-danger btn-sm btn-remove" data-id="${item.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                        `;
                    cartItems.append(row);
                });

                $('#cartTotal').text(formatCurrency(total));
                $('#totalAmount').val(formatCurrency(total));
            }
            // Xử lý tăng giảm số lượng
            $(document).on('click', '.quantity-decrease', function () {
                const productId = $(this).data('id');
                const product = cart.find(item => item.id === productId);
                if (product && product.quantity > 1) {
                    product.quantity--;
                    updateCart();
                }
            });

            $(document).on('click', '.quantity-increase', function () {
                const productId = $(this).data('id');
                const product = cart.find(item => item.id === productId);
                if (product) {
                    product.quantity++;
                    updateCart();
                }
            });
            // Xóa sản phẩm khỏi giỏ hàng
            $(document).on('click', '.btn-remove', function () {
                const productId = $(this).data('id');

                // Xóa sản phẩm khỏi mảng giỏ hàng
                cart = cart.filter(item => item.id !== productId);

                // Cập nhật lại giỏ hàng
                updateCart();
            });

            // Tăng số lượng sản phẩm
            $(document).on('click', '.increase-quantity', function () {
                const productId = $(this).data('id');

                // Tìm sản phẩm trong giỏ hàng và tăng số lượng
                const product = cart.find(item => item.id === productId);
                if (product) {
                    product.quantity += 1;
                }

                // Cập nhật lại giỏ hàng
                updateCart();
            });

            // Giảm số lượng sản phẩm
            $(document).on('click', '.decrease-quantity', function () {
                const productId = $(this).data('id');

                // Tìm sản phẩm trong giỏ hàng và giảm số lượng
                const product = cart.find(item => item.id === productId);
                if (product && product.quantity > 1) {
                    product.quantity -= 1;
                }

                // Cập nhật lại giỏ hàng
                updateCart();
            });

            // Cập nhật số lượng từ input
            $(document).on('change', '.quantity-input', function () {
                const productId = $(this).data('id');
                const newQuantity = parseInt($(this).val());

                // Kiểm tra giá trị mới và cập nhật số lượng
                const product = cart.find(item => item.id === productId);
                if (product && newQuantity > 0) {
                    product.quantity = newQuantity;
                } else {
                    $(this).val(product ? product.quantity : 1); // Khôi phục giá trị cũ nếu không hợp lệ
                }

                // Cập nhật lại giỏ hàng
                updateCart();
            });

            //Calculate totals
            function calculateTotals() {

                const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                $('#totalAmount').val(formatCurrency(total));

                const paid = parseFloat($('#paidAmount').val()) || 0;
                const change = paid - total;
                $('#changeAmount').val(formatCurrency(change));
            }

            // Handle quantity change
            $(document).on('change', '.quantity', function () {
                const productId = $(this).data('id');
                const newQuantity = $(this).val();

                // Tìm sản phẩm trong giỏ hàng và cập nhật số lượng
                const product = cart.find(item => item.id === productId);
                if (product) {
                    product.quantity = parseInt(newQuantity);
                }

                // Cập nhật giỏ hàng sau khi thay đổi số lượng
                updateCart();
            });
            $(document).on('input', '#paidAmount', function () {
                calculateChange();// Gọi hàm tính tiền thối khi số tiền trả thay đổi
            });
            function calculateChange() {
                const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                const paid = parseFloat($('#paidAmount').val()) || 0;  // Lấy số tiền khách trả từ trường nhập liệu
                if (paid < total) {
                    $('#changeAmount').val("Số tiền thanh toán không đủ!");  // Hiển thị thông báo lỗi
                    $('#completePayment').prop('disabled', true);  // Vô hiệu hóa nút thanh toán
                } else {
                    const change = paid - total;  // Tiền thối = Tiền khách trả - Tổng tiền giỏ hàng
                    $('#changeAmount').val(formatCurrency(change));  // Cập nhật tiền thối trên giao diện
                    $('#completePayment').prop('disabled', false);  // Kích hoạt nút thanh toán
                }
            }
            $(document).on('input', '#paidAmount', function () {
                calculateChange();  // Gọi hàm tính tiền thối khi số tiền trả thay đổi
            });

            function formatCurrency(amount) {
                return amount.toLocaleString('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                });
            }
            // Remove item from cart
            $(document).on('click', '.remove-item', function () {
                const itemId = $(this).data('id');
                cart = cart.filter(item => item.id !== itemId); // Xóa sản phẩm khỏi giỏ hàng
                updateCart(); // Cập nhật lại giỏ hàng trên giao diện
            });

            // Remove item from cart
            $(document).on('click', '.remove-item', function () {
                $(this).closest('tr').remove();
            });

            document.getElementById("completePayment").addEventListener("click", async function () {
                // const customerSelect = document.getElementById("customerSelect").value;

                // Nếu là khách lẻ, customerId sẽ là 0 (hoặc nếu có customerId từ form, sử dụng customerId đó)
                // const customerId = document.getElementById("customerSelect").value;
                // const customerSelect = document.getElementById("customerSelect");
                // const selectedOption = customerSelect.options[customerSelect.selectedIndex];

                // let customerId = 0; // Mặc định là khách lẻ

                // // Nếu là khách thành viên, lấy giá trị data-id từ option được chọn
                // if (selectedOption.value === "registered") {
                //     customerId = selectedOption.getAttribute("data-id");
                // }
                // const customerSelect = document.getElementById("customerSelect");
                // const customerId = customerSelect.value === "registered"
                //     ? customerSelect.options[customerSelect.selectedIndex].dataset.id
                //     : "walk-in";
                // const customerId = document.getElementById("customerSelect").value;

                const customerName = document.getElementById("customerName").value.trim(); // Tên khách hàng
                const customerPhone = document.getElementById("customerPhone").value.trim(); // Lấy số điện thoại của khách hàng
                const customerAddress = document.getElementById("customerAddress").value.trim(); // Địa chỉ
                const staffSelect = document.getElementById("staffSelect").value; // Nhân viên bán hàng
                const totalAmount = parseFloat(document.getElementById("totalAmount").value); // Tổng số tiền
                const paidAmount = parseFloat(document.getElementById("paidAmount").value); // Số tiền thanh toán
                const paymentMethod = document.getElementById("paymentMethod").value; // Phương thức thanh toán

                let changeAmount = paidAmount - totalAmount;
                if (changeAmount < 0) {
                    changeAmount = 0; // Nếu khách trả ít hơn tổng tiền, không có tiền thối
                }

                // Kiểm tra giỏ hàng hợp lệ
                if (!cart || cart.length === 0) {
                    await showAlert("Giỏ hàng trống!", "warning");
                    return;
                }
                if (!staffSelect || staffSelect === "Chọn nhân viên") {
                    await showAlert("Vui lòng chọn nhân viên bán hàng.", "warning");
                    return;
                }
                if (!customerName) {
                    await showAlert("Vui lòng nhập tên khách hàng.", "warning");
                    return;
                }
                if (!customerPhone || !/^\d{9,10}$/.test(customerPhone)) {
                    await showAlert("Vui lòng nhập số điện thoại hợp lệ (9 hoặc 10 chữ số).", "warning");
                    return;
                }
                if (!customerAddress) {
                    await showAlert("Vui lòng nhập địa chỉ khách hàng.", "warning");
                    return;
                }
                if (!paymentMethod) {
                    await showAlert("Vui lòng chọn phương thức thanh toán.", "warning");
                    return;
                }
                if (isNaN(totalAmount) || isNaN(paidAmount) || paidAmount < totalAmount) {
                    await showAlert("Vui lòng nhập đầy đủ thông tin hoặc kiểm tra lại số tiền.", "warning");
                    return;
                }

                // Tạo đối tượng billData với thông tin hóa đơn
                const billData = {
                    // CustomerId: customerId,
                    UserId: staffSelect,
                    CustomerPhone: customerPhone,
                    TotalAmount: totalAmount,
                    PaidAmount: paidAmount,
                    PaymentMethod: paymentMethod,
                    BillDetails: cart.map(item => ({
                        ProductId: item.id,
                        Quantity: item.quantity,
                        Price: item.price,
                        Total: item.price * item.quantity
                    })) // Gửi danh sách chi tiết hóa đơn
                };

                try {
                    const response = await fetch("/Admin/AdminBanHangTaiQuay/CompleteBill", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json", // Đảm bảo gửi đúng header
                        },
                        body: JSON.stringify(billData), // Chuyển đối tượng JavaScript thành JSON
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Cập nhật thông tin khách hàng trong bảng
                        // updateCustomerInfo(result.billId, customerName, customerPhone);
                        await showAlert("Thanh toán thành công! Chi tiết hóa đơn: " + result.billId, "success");
                        // Chờ thanh toán hoàn tất rồi mới in hóa đơn
                        await completePaymentAndPrintBill(result.billId);
                        resetFormData();
                    } else {
                        await showAlert("Thanh toán thất bại: " + result.message, "error");
                    }
                } catch (error) {
                    console.error("Lỗi khi gửi yêu cầu thanh toán:", error);
                    await showAlert("Đã xảy ra lỗi trong quá trình thanh toán. Vui lòng thử lại.", "error");
                }
            });
            // function updateCustomerInfo(billId, customerName, customerPhone) {
            //     // Lấy dòng của hóa đơn từ bảng dựa trên BillId
            //     const billRow = document.querySelector(tr[data-bill-id='${billId}']);

            //     // Cập nhật tên khách hàng
            //     const customerCell = billRow.querySelector('.customer-name');

            //     if (customerName) {
            //         customerCell.innerHTML =
            //         <div class="d-flex align-items-center">
            //             <div class="avatar avatar-sm me-2">
            //                 <div class="avatar-title rounded-circle bg-primary-soft text-primary">
            //                     <i class="fas fa-user"></i>
            //                 </div>
            //             </div>
            //             <div class="fw-bold">${customerName}</div>
            //         </div>
            //     ;
            //     } else {
            //         customerCell.innerHTML = "<span class='text-muted'>Khách lẻ</span>";
            //     }
            // }
            // Khởi tạo các chức năng khi trang load



            document.addEventListener('DOMContentLoaded', function () {
                initializeSearch();
                loadProducts();
            });

            function resetFormData() {
                // Xóa thông tin giỏ hàng
                cart = [];

                // Đặt lại các trường trong form
                document.getElementById("customerName").value = "";
                document.getElementById("customerPhone").value = "";
                document.getElementById("customerAddress").value = "";
                document.getElementById("staffSelect").value = "Chọn nhân viên";
                document.getElementById("totalAmount").value = "0";
                document.getElementById("paidAmount").value = "0";
                document.getElementById("paymentMethod").value = "";
                    document.getElementById("changeAmount").value = "";
                // Xóa hiển thị giỏ hàng trên giao diện
                const cartItems = document.getElementById("cartItems");
                if (cartItems) {
                    cartItems.innerHTML = ""; // Xóa toàn bộ nội dung trong tbody
                }

                // Đặt lại tổng cộng về 0
                const cartTotal = document.getElementById("cartTotal");
                if (cartTotal) {
                    cartTotal.textContent = "0 ₫"; // Reset tổng cộng
                }

                // Thông báo thành công
                console.log("Dữ liệu đã được làm mới.");
            }

            function completePaymentAndPrintBill(billId) {
                $.ajax({
                    url: '/Admin/AdminBanHangTaiQuay/PrintBill',
                    type: 'GET',
                    data: { id: billId },
                    success: function (response) {
                        if (response.success) {
                            try {
                                // Chuyển base64 thành Blob
                                var byteCharacters = atob(response.pdf); // Giải mã base64 thành byte
                                var byteArrays = [];

                                for (var offset = 0; offset < byteCharacters.length; offset += 1024) {
                                    var slice = byteCharacters.slice(offset, offset + 1024);
                                    var byteNumbers = new Array(slice.length);
                                    for (var i = 0; i < slice.length; i++) {
                                        byteNumbers[i] = slice.charCodeAt(i);
                                    }
                                    byteArrays.push(new Uint8Array(byteNumbers));
                                }

                                var blob = new Blob(byteArrays, { type: 'application/pdf' });

                                // Tạo URL cho Blob
                                var link = document.createElement('a');
                                link.href = URL.createObjectURL(blob);
                                link.download = `bill_${billId}.pdf`; // Tên file khi tải về
                                link.click(); // Tải file tự động

                                // Mở cửa sổ in PDF tự động
                                window.open(link.href, '_blank'); // Mở cửa sổ in
                            } catch (error) {
                                console.error("Lỗi khi xử lý PDF:", error);
                                showAlert("Đã xảy ra lỗi khi xử lý tệp PDF.", "error");
                            }
                        } else {
                            showAlert("Không tìm thấy thông tin hóa đơn.", "warning");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Lỗi khi gọi API:", error);
                        showAlert("Không thể hoàn thành yêu cầu in hóa đơn. Vui lòng thử lại sau.", "error");
                    }
                });
            }


            // Utility functions
            function formatCurrency(amount) {
                return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
            }
            document.getElementById("cancelBill").addEventListener("click", function () {
                // Reset các trường nhập liệu
                document.getElementById("customerName").value = "";      // Tên khách hàng
                document.getElementById("customerPhone").value = "";     // Số điện thoại
                document.getElementById("customerAddress").value = "";   // Địa chỉ
                document.getElementById("staffSelect").value = "Chọn nhân viên"; // Chọn nhân viên
                document.getElementById("totalAmount").value = "";       // Tổng số tiền
                document.getElementById("paidAmount").value = "";        // Số tiền thanh toán
                document.getElementById("paymentMethod").value = "";     // Phương thức thanh toán
                document.getElementById("changeAmount").value = "";      // Tiền thối

                // Reset giỏ hàng (nếu có)
                cart = []; // Nếu bạn có một biến `cart` chứa giỏ hàng, reset giỏ hàng này

                // Nếu bạn muốn cập nhật lại giao diện giỏ hàng hoặc số lượng sản phẩm, có thể gọi lại các hàm render lại giao diện
                updateCart(); // Giả sử bạn có một hàm renderCart() để cập nhật giỏ hàng trên giao diện

                // Thông báo người dùng đã hủy
                    showAlert("Đã hủy giao dịch. Tất cả dữ liệu đã được xóa.", "info");
            });
            // Lắng nghe sự kiện 'input' từ thanh tìm kiếm
            document.querySelector('.search-input').addEventListener('input', function () {
                const searchTerm = this.value.toLowerCase().trim(); // Lấy giá trị tìm kiếm
                const productItems = document.querySelectorAll('.product-item'); // Lấy tất cả sản phẩm

                // Lặp qua từng sản phẩm
                productItems.forEach(item => {
                    const productName = item.querySelector('.card-title').textContent.toLowerCase(); // Lấy tên sản phẩm
                    // Kiểm tra nếu tên sản phẩm khớp với từ khóa tìm kiếm
                    if (productName.includes(searchTerm)) {
                        item.style.display = ''; // Hiển thị sản phẩm nếu khớp
                    } else {
                        item.style.display = 'none'; // Ẩn sản phẩm nếu không khớp
                    }
                });
            });
            // Thêm xử lý tìm kiếm với debounce
            // let searchTimeout;
            // $('.search-input').on('input', function () {
            //     clearTimeout(searchTimeout);
            //     const searchTerm = this.value.toLowerCase().trim();

            //     searchTimeout = setTimeout(() => {
            //         if (searchTerm === '') {
            //             loadProducts(currentPage);
            //             return;
            //         }

            //         const filteredProducts = allProducts.filter(product =>
            //             product.name.toLowerCase().includes(searchTerm)
            //         );

            //         displayProducts(filteredProducts);
            //         $('#productPagination').toggle(searchTerm === '');
            //     }, 300);
            // });


            // Initialize
            loadProducts();
        });
        feather.replace();
    </script>
}
